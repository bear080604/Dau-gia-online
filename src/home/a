import React, { useEffect, useState, useMemo, useRef } from 'react';
import './home.css';
import { Link } from 'react-router-dom';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination } from 'swiper/modules';
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';
import axios from 'axios';
import io from 'socket.io-client';

// Cache for deduplicating image requests
const imageCache = new Map();

// Preload images function
const preloadImages = (urls) => {
  urls.forEach((url) => {
    if (url && !imageCache.has(url) && url.startsWith('http')) {
      const img = new Image();
      img.src = url;
      img.onerror = () => {
        imageCache.set(url, { src: '' });
      };
      imageCache.set(url, img);
    }
  });
};

// Component AuctionItem - CH·ªà D√ôNG STATUS T·ª™ SOCKET
const AuctionItem = React.memo(({ session }) => {
  const getAuctionStatus = (status) => {
    const statusMap = {
      DangDienRa: 'ƒêang di·ªÖn ra',
      KetThuc: 'K·∫øt th√∫c',
      Pause: 'T·∫°m d·ª´ng',
      Mo: 'Ch∆∞a b·∫Øt ƒë·∫ßu',
    };
    return statusMap[status] || 'Ch∆∞a c·∫≠p nh·∫≠t';
  };

  const displayStatus = getAuctionStatus(session.status);
  const item = session.item;
  const imageUrl = item?.image_url
    ? `${process.env.REACT_APP_BASE_URL}${item.image_url}`
    : '';

  // Preload image
  useEffect(() => {
    if (item?.image_url) {
      preloadImages([imageUrl]);
    }
  }, [imageUrl]);

  return (
    <div className="list-auction">
      <div className="auction-item">
        <div className="item-img">
          <img
            className="auction-image"
            src={imageCache.get(imageUrl)?.src || imageUrl}
            alt={item?.name || 'S·∫£n ph·∫©m'}
            loading="lazy"
            onError={(e) => {
              if (e.target.src !== '/assets/img/xe.png') {
                e.target.src = '/assets/img/xe.png';
              }
            }}
          />
        </div>
        <div className="auction-details">
          <h3 className="auction-name">{item?.name || 'Ch∆∞a c√≥ t√™n'}</h3>
          <p
            className="auction-method"
            style={{
              color:
                session.status === 'Mo'
                  ? '#16a34a'
                  : session.status === 'KetThuc'
                  ? '#dc2626'
                  : session.status === 'Pause'
                  ? '#eab308'
                  : '#6b7280',
              fontWeight: 'bold',
            }}
          >
            {displayStatus}
          </p>
          <p className="auction-price" style={{ minHeight: '45px' }}>
            Gi√° kh·ªüi ƒëi·ªÉm: {Number(item?.starting_price || 0).toLocaleString()} VNƒê
          </p>
          {session.highest_bid && (
            <p className="auction-current-price" style={{ color: '#16a34a', fontWeight: 'bold', minHeight: '52px' }}>
              Gi√° cao nh·∫•t: {Number(session.highest_bid).toLocaleString()} VNƒê
            </p>
          )}
          {!session.highest_bid && (
            <p className="auction-current-price" style={{ minHeight: '52px' }}></p>
          )}
        </div>
        <div className="action">
          <Link to={`/detail/${session.session_id}`} style={{ textDecoration: 'none' }}>
            <button className="bid-button">
              <i className="fa fa-gavel" aria-hidden="true"></i> ƒê·∫•u gi√°
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
});

// Debounce utility
const debounce = (func, wait) => {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
};

// Component ch√≠nh
const Home = () => {
  const [sessions, setSessions] = useState([]);
  const [categories, setCategories] = useState([]);
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState('default');
  const [news, setNews] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const socketRef = useRef(null);
  const initialDataFetchedRef = useRef(false);

  // Debounced state update for sessions
  const debouncedSetSessions = useRef(debounce(setSessions, 100)).current;

  // K·∫øt n·ªëi Socket.io
  useEffect(() => {
    const socket = io(process.env.REACT_APP_SOCKET_URL);
    socketRef.current = socket;

    socket.on('connect', () => {
      socket.emit('join.channel', 'auction-sessions');
    });

    socket.on('disconnect', () => {
      console.log('‚ö†Ô∏è Socket disconnected');
    });

    socket.on('auction-sessions', (data) => {
      console.log('üì© Nh·∫≠n d·ªØ li·ªáu phi√™n ƒë·∫•u gi√° t·ª´ socket:', data);
      if (Array.isArray(data)) {
        debouncedSetSessions(data);
      }
    });

    socket.on('auction.session.updated', (updatedData) => {
      console.log('üîÑ C·∫≠p nh·∫≠t phi√™n ƒë·∫•u gi√° realtime:', updatedData);
      const updatedSession = updatedData.session || updatedData;
      debouncedSetSessions((prev) => {
        const index = prev.findIndex((s) => s.session_id === updatedSession.session_id);
        if (index !== -1) {
          const newSessions = [...prev];
          newSessions[index] = { ...newSessions[index], ...updatedSession };
          console.log(`‚ú® Status updated: Session ${updatedSession.session_id} -> ${updatedSession.status}`);
          return newSessions;
        } else {
          console.log(`‚ö†Ô∏è Session ${updatedSession.session_id} kh√¥ng t·ªìn t·∫°i, th√™m m·ªõi`);
          return [updatedSession, ...prev];
        }
      });
    });

    socket.on('auction.session.created', (newData) => {
      console.log('‚ú® Phi√™n ƒë·∫•u gi√° m·ªõi:', newData);
      const newSession = newData.session || newData;
      debouncedSetSessions((prev) => {
        if (prev.some((s) => s.session_id === newSession.session_id)) {
          console.log(`‚ö†Ô∏è Phi√™n ${newSession.session_id} ƒë√£ t·ªìn t·∫°i, b·ªè qua`);
          return prev;
        }
        console.log(`‚úÖ Th√™m phi√™n m·ªõi ${newSession.session_id}`);
        return [newSession, ...prev];
      });
    });

    socket.on('auction.session.deleted', (deletedData) => {
      console.log('üóëÔ∏è Phi√™n ƒë·∫•u gi√° b·ªã x√≥a:', deletedData);
      const deletedSession = deletedData.session || deletedData;
      debouncedSetSessions((prev) => prev.filter((s) => s.session_id !== deletedSession.session_id));
    });

    socket.on('error', (err) => {
      console.error('‚ùå L·ªói Socket.io:', err);
      setError('L·ªói k·∫øt n·ªëi th·ªùi gian th·ª±c');
    });

    return () => {
      socket.emit('leave.channel', 'auction-sessions');
      socket.disconnect();
    };
  }, []);

  // Fetch d·ªØ li·ªáu ban ƒë·∫ßu v·ªõi retry logic
  useEffect(() => {
    if (initialDataFetchedRef.current) return;
    initialDataFetchedRef.current = true;

    const fetchWithRetry = async (url, options, retries = 3) => {
      for (let i = 0; i < retries; i++) {
        try {
          const response = await axios.get(url, options);
          return response;
        } catch (err) {
          if (i === retries - 1) throw err;
          await new Promise((resolve) => setTimeout(resolve, 1000));
        }
      }
    };

    const fetchInitialData = async () => {
      setLoading(true);
      try {
        // Fetch categories
        const categoryResponse = await fetchWithRetry(`${process.env.REACT_APP_API_URL}categories`, {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        setCategories(categoryResponse.data.status && categoryResponse.data.data ? categoryResponse.data.data : []);

        // Fetch auction sessions
        const sessionsResponse = await fetchWithRetry(`${process.env.REACT_APP_API_URL}auction-sessions`, {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        const sessionsData = sessionsResponse.data.sessions || sessionsResponse.data.data || sessionsResponse.data || [];

        debouncedSetSessions(Array.isArray(sessionsData) ? sessionsData : []);

        // Fetch news
        const newsResponse = await fetch(`${process.env.REACT_APP_API_URL}news`);
        if (!newsResponse.ok) throw new Error('L·ªói khi l·∫•y tin t·ª©c');
        const newsData = await newsResponse.json();

        const formattedNews = newsData.map((item) => {
          const imageUrl = item.thumbnail && item.thumbnail.startsWith('/')
            ? `${process.env.REACT_APP_BASE_URL}${item.thumbnail}`
            : item.thumbnail;
          return {
            id: item.id,
            category: item.category?.name || 'Kh√°c',
            title: item.title,
            date: new Date(item.created_at).toLocaleDateString('vi-VN'),
            summary: item.content.substring(0, 100) + (item.content.length > 100 ? '...' : ''),
            imageUrl,
          };
        });
        setNews(formattedNews);

        // Preload news images
        preloadImages(formattedNews.map((item) => item.imageUrl));

        setError(null);
      } catch (err) {
        console.error('‚ùå L·ªói API:', err);
        setError(`L·ªói khi t·∫£i d·ªØ li·ªáu: ${err.message}`);
      } finally {
        setLoading(false);
      }
    };


    fetchInitialData();
  }, []);

  // L·ªçc v√† s·∫Øp x·∫øp sessions
  const filteredSessions = useMemo(() => {
    let filtered = sessions.filter((session) => {
      const item = session.item;
      if (!item) return false;
      const matchesSearch = item.name?.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = categoryFilter === 'all' || item.category_id === parseInt(categoryFilter);
      return matchesSearch && matchesCategory;
    });

    if (sortBy === 'price-asc') {
      return [...filtered].sort((a, b) => Number(a.item?.starting_price || 0) - Number(b.item?.starting_price || 0));
    } else if (sortBy === 'price-desc') {
      return [...filtered].sort((a, b) => Number(b.item?.starting_price || 0) - Number(a.item?.starting_price || 0));
    }
    return filtered;
  }, [sessions, searchTerm, categoryFilter, sortBy]);

  // L·∫•y 10 phi√™n m·ªõi nh·∫•t
  const latestSessions = useMemo(() => {


    const sorted = [...sessions].sort((a, b) => b.session_id - a.session_id).slice(0, 10);

    // Preload images for latest sessions
    preloadImages(
      sorted
        .filter((s) => s.item?.image_url)
        .map((s) => `${process.env.REACT_APP_BASE_URL}${s.item.image_url}`)
    );
    return sorted;
  }, [sessions]);

  return (
    <div className="home-container">
      <main style={{ padding: '20px 8%' }}>
        <div className="section-title">
          <p>PHI√äN ƒê·∫§U GI√Å M·ªöI NH·∫§T/N·ªîI B·∫¨T</p>
        </div>

        {loading && <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>}
        {error && <p className="error-message">{error}</p>}
        {!loading && latestSessions.length === 0 && !error && <p>Kh√¥ng c√≥ phi√™n ƒë·∫•u gi√° n√†o.</p>}
        <Swiper
          modules={[Navigation, Pagination]}
          spaceBetween={20}
          navigation
          pagination={{ clickable: true }}
          breakpoints={{
            320: { slidesPerView: 1 },
            640: { slidesPerView: 2 },
            1024: { slidesPerView: 5 },
          }}
          key={latestSessions.map((s) => s.session_id).join('-')}
        >
          {latestSessions.map((session) => (
            <SwiperSlide key= {session.session_id}>
              <AuctionItem session={session} />
            </SwiperSlide>
          ))}
        </Swiper>

        <section>
          <div className="section-title">
            <p>DANH S√ÅCH T√ÄI S·∫¢N ƒê·∫§U GI√Å TR·ª∞C TUY·∫æN</p>
          </div>
          <div className="head">
            <div className="input-search">
              <input
                className="input"
                type="text"
                placeholder="T√¨m ki·∫øm ..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="select-cate">
              <select
                name="category"
                value={categoryFilter}
                onChange={(e) => setCategoryFilter(e.target.value)}
              >
                <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
                {categories.map((category) => (
                  <option key={category.category_id} value={category.category_id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>
            <div className="method">
              <select name="method">
                <option value="">Ph∆∞∆°ng th·ª©c ƒë·∫•u gi√°</option>
                <option value="ƒê·∫•u gi√° t·ª± do">ƒê·∫•u gi√° t·ª± do</option>
              </select>
            </div>
            <div className="sort">
              <p>S·∫Øp x·∫øp: </p>
              <select
                className="select"
                name="sort"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <option value="default">M·∫∑c ƒë·ªãnh</option>
                <option value="price-asc">Gi√° tƒÉng d·∫ßn</option>
                <option value="price-desc">Gi√° gi·∫£m d·∫ßn</option>
              </select>
            </div>
          </div>

          {loading && <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>}
          {error && <p className="error-message">{error}</p>}
          {!loading && filteredSessions.length === 0 && !error && <p>Kh√¥ng c√≥ t√†i s·∫£n n√†o.</p>}
          <Swiper
            modules={[Navigation, Pagination]}
            spaceBetween={20}
            navigation
            pagination={{ clickable: true }}
            breakpoints={{
              320: { slidesPerView: 1 },
              640: { slidesPerView: 2 },
              1024: { slidesPerView: 5 },
            }}
            key={filteredSessions.map((s) => s.session_id).join('-')}
          >
            {filteredSessions.slice(0, 10).map((session) => (
              <SwiperSlide key={session.session_id}>
                <AuctionItem session={session} />
              </SwiperSlide>
            ))}
          </Swiper>
        </section>

        <section>
          <div className="section-title">
            <p>TIN T·ª®C V√Ä TH√îNG B√ÅO</p>
          </div>

          {loading && <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>}
          {error && <p className="error-message">{error}</p>}
          {!loading && news.length === 0 && !error && <p>Kh√¥ng c√≥ tin t·ª©c n√†o.</p>}
          <Swiper
            modules={[Navigation, Pagination]}
            spaceBetween={20}
            navigation
            pagination={{ clickable: true }}
            breakpoints={{
              320: { slidesPerView: 1 },
              640: { slidesPerView: 2 },
              1024: { slidesPerView: 4 },
            }}
          >
            {news.slice(0, 8).map((newsItem) => (
              <SwiperSlide key={newsItem.id}>
                <div className="news-item">
                  <img
                    className="news-image"
                    src={imageCache.get(newsItem.imageUrl)?.src || newsItem.imageUrl}
                    alt={newsItem.title}

                    loading="lazy"
                  />
                  <div className="news-details">
                    <h3 className="news-title" style={{ minHeight: '56px' }}>
                      {newsItem.title}
                    </h3>
                    <p className="news-date">{newsItem.date}</p>
                    <p className="news-summary" style={{ minHeight: '72px' }}>
                      {newsItem.summary}
                    </p>
                  </div>
                  <div className="action">
                    <Link to={`/news/${newsItem.id}`} style={{ textDecoration: 'none' }}>
                      <button className="read-more-button">
                        <i className="fa fa-arrow-right" aria-hidden="true"></i> ƒê·ªçc th√™m
                      </button>
                    </Link>
                  </div>
                </div>
              </SwiperSlide>
            ))}
          </Swiper>
        </section>
      </main>
    </div>
  );
};

export default Home;